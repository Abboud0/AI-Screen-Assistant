name: Build & Release (Tauri - Windows)

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      # --- NEW: Create a CI-only Tauri config that disables npm ---
      - name: Create CI Tauri config (disable npm build)
        shell: pwsh
        run: |
          $confPath = "src-tauri/tauri.conf.json"
          if (!(Test-Path $confPath)) { throw "Tauri config not found at $confPath" }
          $json = Get-Content $confPath -Raw | ConvertFrom-Json
          if ($null -eq $json.build) { $json | Add-Member -MemberType NoteProperty -Name build -Value (@{}) }
          $json.build.beforeDevCommand = ""
          $json.build.beforeBuildCommand = ""
          $json.build.devUrl = $null
          if ($null -eq $json.build.frontendDist -or $json.build.frontendDist -eq "") { $json.build.frontendDist = "../dist" }
          $ciConf = "src-tauri/tauri.ci.conf.json"
          $json | ConvertTo-Json -Depth 20 | Set-Content $ciConf -Encoding UTF8
          # Tell tauri/tauri-action to use this file
          "TAURI_CONFIG=$ciConf" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Using CI config at $ciConf"
          Get-Content $ciConf

      # --- NEW: Ensure there is something to bundle at frontendDist ---
      - name: Ensure dist exists (fallback)
        shell: pwsh
        run: |
          if (!(Test-Path "dist")) { New-Item -ItemType Directory -Path "dist" | Out-Null }
          if (!(Test-Path "dist/index.html")) {
            @"
<!doctype html>
<html><head><meta charset="utf-8"><title>Glint</title></head>
<body><h1>Glint</h1><p>CI fallback page.</p></body></html>
"@ | Set-Content "dist/index.html" -Encoding UTF8
          }
          Write-Host "Dist contents:"
          Get-ChildItem -Recurse dist | Select-Object FullName

      - name: Build Tauri (Windows)
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tauri-windows
          path: |
            src-tauri/target/release/bundle/**/*.msi
            src-tauri/target/release/bundle/**/*.exe
            src-tauri/target/release/bundle/**/*.zip

name: Build & Release (Tauri - Windows)

on:
  push:
    tags:
      - 'v*'                # runs when you push a tag like v0.1.0
  workflow_dispatch: {}      # allows manual runs from the Actions tab

permissions:
  contents: write

jobs:
  release:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install Tauri bundler deps
        run: |
          rustup target add x86_64-pc-windows-msvc
          cargo install tauri-cli --locked

      # Create a CI-only tauri config that strips npm hooks completely
      - name: Create CI Tauri config (no npm)
        shell: pwsh
        run: |
          $confPath = "src-tauri/tauri.conf.json"
          if (!(Test-Path $confPath)) { throw "Tauri config not found at $confPath" }
          $json = Get-Content $confPath -Raw | ConvertFrom-Json
          if ($null -eq $json.build) { $json | Add-Member -MemberType NoteProperty -Name build -Value (@{}) }

          # Remove hooks so nothing calls npm
          if ($json.build.PSObject.Properties.Name -contains 'beforeDevCommand')   { $json.build.PSObject.Properties.Remove('beforeDevCommand') }
          if ($json.build.PSObject.Properties.Name -contains 'beforeBuildCommand') { $json.build.PSObject.Properties.Remove('beforeBuildCommand') }
          if ($json.build.PSObject.Properties.Name -contains 'devUrl')             { $json.build.PSObject.Properties.Remove('devUrl') }

          if ($null -eq $json.build.frontendDist -or "$($json.build.frontendDist)".Trim() -eq "") {
            $json.build | Add-Member -NotePropertyName frontendDist -NotePropertyValue "../dist"
          }

          $ciConf = "src-tauri/tauri.ci.conf.json"
          $json | ConvertTo-Json -Depth 20 | Set-Content $ciConf -Encoding UTF8
          Write-Host "Using CI config at ${ciConf}:"
          Get-Content $ciConf | Write-Host

      - name: Overwrite tauri.conf.json with CI config (safety)
        shell: pwsh
        run: Copy-Item -Force "src-tauri/tauri.ci.conf.json" "src-tauri/tauri.conf.json"

      # Ensure there is something to bundle
      - name: Ensure dist exists (fallback)
        shell: pwsh
        run: |
          if (!(Test-Path "dist")) { New-Item -ItemType Directory -Path "dist" | Out-Null }
          if (!(Test-Path "dist/index.html")) {
            @"
              <!doctype html>
              <html><head><meta charset="utf-8"><title>Glint</title></head>
              <body><h1>Glint</h1><p>CI fallback page.</p></body></html>
          "@ | Set-Content "dist/index.html" -Encoding UTF8
          }
          Write-Host "Dist contents:"; Get-ChildItem -Recurse dist | Select-Object FullName

      # Build with the CI config explicitly
      - name: Build Tauri (Windows) via action
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_CONFIG: src-tauri/tauri.ci.conf.json

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tauri-windows
          path: |
            src-tauri/target/release/bundle/**/*.msi
            src-tauri/target/release/bundle/**/*.exe
            src-tauri/target/release/bundle/**/*.zip
